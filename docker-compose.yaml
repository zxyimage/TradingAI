services:
  timescaledb:
    image: timescale/timescaledb:latest-pg14
    container_name: stock_timescaledb
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=stockuser
      - POSTGRES_PASSWORD=stockpassword
      - POSTGRES_DB=stockdb
    volumes:
      - timescaledb_data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - stock-network

  redis:
    image: redis:alpine
    container_name: stock_redis
    ports:
      - "16379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - stock-network
    command: redis-server --appendonly yes

  stock-backend:
    build:
      context: ./Backend
      dockerfile: Dockerfile
    container_name: stock_backend
    depends_on:
      - timescaledb
      - redis
    ports:
      - "18000:5000"  # 暴露API服务端口
    # 添加环境变量文件
    env_file:
      - ./.env
    environment:
      - DB_HOST=timescaledb
      - DB_USER=stockuser
      - DB_PASSWORD=stockpassword
      - DB_NAME=stockdb
      # Redis配置
      - REDIS_HOST=redis
      - REDIS_PORT=16379
      # 使用特殊的Docker DNS名称连接宿主机上的FutuOpenD
      - FUTU_HOST=host.docker.internal
      - FUTU_PORT=${FUTU_PORT:-11111}
      # 显式添加API密钥和CORS设置
      - TRADING_API_KEY=${TRADING_API_KEY:-your-secret-api-key}
      - ALLOWED_ORIGINS=http://localhost:8080,http://127.0.0.1:8080,http://localhost:3001,http://frontend:3001
    volumes:
      - ./Backend:/app
    networks:
      - stock-network
    # 确保host.docker.internal在Linux上也能工作
    extra_hosts:
      - "host.docker.internal:host-gateway"

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: stock_frontend
    depends_on:
      - stock-backend
    ports:
      - "3001:3000"
    # 添加环境变量文件
    env_file:
      - ./.env
    environment:
      # 在Docker环境中使用服务名
      - NEXT_PUBLIC_API_BASE_URL=http://stock-backend:5000/api
      - NEXT_PUBLIC_API_KEY=${TRADING_API_KEY:-your-secret-api-key}
      - NODE_ENV=production
    restart: unless-stopped
    networks:
      - stock-network

networks:
  stock-network:
    driver: bridge

volumes:
  timescaledb_data:
  redis_data: